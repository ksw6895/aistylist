## 나만의 AI 스타일리스트: 개발 가이드라인

본 문서는 '나만의 AI 스타일리스트' 웹 애플리케이션 개발을 위한 상세 가이드라인입니다. 개발자는 본 문서를 통해 프로젝트의 목표, 기술 스택, 시스템 아키텍처, API 명세, 핵심 로직 및 화면 구성을 파악하여 최종 결과물을 완성할 수 있습니다.

-----

### 1\. 프로젝트 개요

**나만의 AI 스타일리스트**는 사용자의 개인 정보(나이, 성별, 직업), 상황(TPO), 원하는 아이템 및 분위기를 기반으로 Gemini AI가 개인 맞춤형 착장을 제안하는 웹 서비스입니다. 사용자는 제안받은 착장을 자신의 '드레싱 룸'에 저장하거나, 부족한 아이템을 '쇼핑 리스트'에 추가할 수 있습니다.

  * **핵심 목표**: 사용자가 매일 어떤 옷을 입을지에 대한 고민을 해결하고, 자신의 스타일을 발전시켜나갈 수 있도록 돕는 지능형 패션 어드바이저 역할 수행.
  * **주요 기능**: 개인화된 착장 추천, 가상 옷장 관리(My dressing room), 쇼핑 아이템 관리(Shopping Recommendation).
  * **AI 모델**: **Google Gemini 2.5 Flash API** (고정)

-----

### 2\. 시스템 아키텍처 및 기술 스택

본 프로젝트는 개발 편의성과 높은 확장성, 그리고 무료 배포를 고려하여 다음과 같은 최신 기술 스택을 사용합니다.

  * **프레임워크 (Framework)**: **Next.js (React)**

      * **선정 이유**: 프론트엔드와 백엔드(API Routes)를 하나의 프로젝트에서 관리할 수 있어 개발 효율성이 높습니다. Vercel 배포에 최적화되어 있으며, 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG)을 지원하여 초기 로딩 속도가 빠릅니다.

  * **배포 (Deployment)**: **Vercel**

      * **선정 이유**: Next.js 개발사가 직접 운영하는 플랫폼으로 배포가 매우 간편합니다. Git push만으로 자동 배포가 가능하며, 무료 플랜으로도 충분히 프로젝트 운영이 가능합니다.

  * **데이터베이스 (Database)**: **Vercel Postgres**

      * **선정 이유**: Vercel에서 제공하는 서버리스 PostgreSQL 데이터베이스입니다. Vercel 프로젝트와 완벽하게 연동되며, 무료로 시작할 수 있는 Hobby 플랜을 제공합니다. 사용자 정보, 드레싱 룸, 쇼핑 리스트 데이터를 저장하기에 적합합니다.

  * **UI/스타일링 (Styling)**: **Tailwind CSS**

      * **선정 이유**: Utility-First CSS 프레임워크로, HTML 내에서 직관적이고 빠르게 스타일을 적용할 수 있습니다. 커스텀 디자인 시스템 구축이 용이하고 반응형 디자인을 쉽게 구현할 수 있습니다.

  * **상태 관리 (State Management)**: **React Context API** 또는 **Zustand**

      * **선정 이유**: 전역적으로 관리되어야 할 사용자 정보, AI 추천 결과 등의 상태를 효율적으로 관리합니다. 프로젝트 초기에는 내장된 Context API로 충분하며, 복잡성이 증가할 경우 가벼운 라이브러리인 Zustand 사용을 권장합니다.

  * **날씨 정보 연동**: **OpenWeatherMap API** 또는 기타 무료 날짜/지역 기반 날씨 API

      * **선정 이유**: 사용자가 입력한 날짜와 지역을 기반으로 실제 날씨 데이터(기온, 날씨 상태 등)를 조회하여 AI 추천의 정확도를 높입니다.

-----

### 3\. 데이터베이스 스키마 (Vercel Postgres)

데이터베이스는 총 3개의 테이블로 구성됩니다.

1.  **Users**

      * 사용자의 고유 정보와 프로필을 저장합니다.
      * `id` (UUID, Primary Key): 사용자 고유 ID
      * `created_at` (Timestamp): 계정 생성일
      * `age` (Integer, Nullable): 나이
      * `gender` (String, Nullable): 성별
      * `occupation` (String, Nullable): 직업

2.  **DressingRoomItems**

      * 사용자의 'My dressing room'에 저장된 아이템을 관리합니다.
      * `id` (UUID, Primary Key): 아이템 고유 ID
      * `user_id` (UUID, Foreign Key to Users.id): 사용자 ID
      * `category` (String): 아이템 분류 (예: 'outer', 'top', 'bottom', 'shoes', 'bag', 'belt', 'hat', 'jewelry')
      * `item_description` (Text): 아이템에 대한 설명 (AI가 생성한 텍스트)
      * `created_at` (Timestamp): 추가된 날짜

3.  **ShoppingListItems**

      * 사용자의 'Shopping Recommendation' 목록에 저장된 아이템을 관리합니다.
      * `id` (UUID, Primary Key): 아이템 고유 ID
      * `user_id` (UUID, Foreign Key to Users.id): 사용자 ID
      * `category` (String): 아이템 분류 (예: 'outer', 'top', 'bottom', 'shoes', 'bag', 'belt', 'hat', 'jewelry')
      * `item_description` (Text): 아이템에 대한 설명 (AI가 생성한 텍스트)
      * `created_at` (Timestamp): 추가된 날짜

-----

### 4\. 화면 구성 및 기능 명세 (UI/UX)

#### 4.1. 메인 화면 (Input & Initial)

  * **기본 레이아웃**:
      * 헤더: 서비스 로고, `My dressing room` 버튼, `Shopping Recommendation` 버튼
      * 바디: AI 스타일링 요청을 위한 입력 폼
  * **컴포넌트 상세**:
      * **`My dressing room` 버튼**: 클릭 시 `/dressing-room` 페이지로 이동합니다.
      * **`Shopping Recommendation` 버튼**: 클릭 시 `/shopping-list` 페이지로 이동합니다.
      * **사용자 정보 입력 섹션**:
          * `나이` (Number Input)
          * `성별` (Select/Radio: 남성, 여성, 기타)
          * `직업` (Text Input)
          * `[ ] 이 정보 저장하기` (Checkbox): 체크 시 브라우저의 `localStorage`에 사용자 정보를 저장하여 다음 방문 시 자동으로 채워줍니다.
      * **상황 정보 입력 섹션**:
          * `날짜` (Date Picker): 기본값은 오늘 날짜입니다.
          * `지역` (Text Input): 날씨 API와 연동하기 위한 지역명 (예: '서울', '부산').
          * **안내 문구**: "입력하신 날짜와 지역의 날씨 정보를 반영하여 스타일을 추천해 드립니다."
      * **스타일 요청 섹션**:
          * `원하는 아이템` (Text Input): 사용자가 가지고 있거나 입고 싶은 아이템. (예: '청바지', '화이트 스니커즈')
          * **안내 문구**: "한 가지 이상의 아이템만 입력하시면 나머지는 AI가 어울리게 조합해 드립니다."
          * `TPO 정보` (Text Input): (예: '주말 데이트', '중요한 비즈니스 미팅', '친구들과의 편안한 브런치')
          * `원하는 분위기` (Text Input): (예: '미니멀', '스트릿', '페미닌', '힙하게')
      * **요청 버튼**: `스타일 추천받기` (Button) - 클릭 시 로딩 인디케이터를 표시하고 백엔드에 AI 추천을 요청합니다.

#### 4.2. 추천 결과 화면 (Output)

  * AI로부터 받은 2가지 착장 제안을 나란히 표시합니다.
  * **컴포넌트 상세**:
      * **착장 제안 카드 (2개)**:
          * 각 카드는 '착장 A', '착장 B'로 구분됩니다.
          * 내부에는 카테고리별로 추천 아이템이 표시됩니다.
              * `아우터`: 추천 아이템 텍스트
              * `상의`: 추천 아이템 텍스트
              * `하의`: 추천 아이템 텍스트
              * `신발`: 추천 아이템 텍스트
              * ... (나머지 카테고리)
              * AI가 특정 카테고리의 아이템이 불필요하다고 판단하면 '해당 없음' 또는 생략하여 표시합니다.
      * **선택지 (Radio Buttons)**:
          * `( ) 착장 A 선택`
          * `( ) 착장 B 선택`
          * `( ) 마음에 드는 착장 없음`
      * **추가 옵션 입력**:
          * `Considering:` (Text Input): 사용자 추가 요청 사항을 입력하는 칸. (예: '좀 더 밝은 색상으로', '구두는 제외해 줘', '검은색 벨트가 없어')
      * **액션 버튼**:
          * `My dressing room에 추가` (Button)
          * `Another recommendation` (Button)

#### 4.3. My dressing room / Shopping Recommendation 화면

  * 두 화면은 동일한 구조를 가집니다.
  * **레이아웃**:
      * 탭 또는 아코디언 메뉴로 카테고리를 구분합니다.
          * `아우터` / `상의` / `하의` / `신발` / `가방` / `벨트` / `모자` / `주얼리`
      * 각 카테고리 선택 시 해당 분류에 저장된 아이템 목록을 텍스트로 보여줍니다.

-----

### 5\. 핵심 로직 및 API 명세

#### 5.1. Gemini API 연동 및 프롬프트 엔지니어링

  * **API 엔드포인트**: `/api/recommend` (POST)

  * **요청 (Request Body)**:

    ```json
    {
      "userInfo": { "age": 28, "gender": "여성", "occupation": "디자이너" },
      "context": { "date": "2025-07-16", "location": "서울", "weather": "맑음, 최고 28°C" },
      "request": {
        "item": "와이드 슬랙스",
        "tpo": "오후 반차 후 친구와 강남에서 약속",
        "mood": "시크하면서도 편안한 느낌"
      },
      "previousRecommendations": [ /* 이전 추천 결과(있는 경우) */ ],
      "considering": "신발은 운동화로 추천해줘" // 추가 요청
    }
    ```

  * **핵심 로C**:

    1.  프론트엔드에서 `/api/recommend`로 요청을 보냅니다.
    2.  백엔드(Next.js API Route)는 `location`과 `date` 정보로 날씨 API를 호출하여 `weather` 정보를 획득합니다.
    3.  모든 정보를 종합하여 Gemini API에 전달할 프롬프트를 생성합니다.

  * **Gemini 프롬프트 예시 (System + User)**:

    > **System Prompt**: 당신은 세계 최고의 AI 패션 스타일리스트입니다. 사용자의 정보와 요구사항을 기반으로, 서로 다른 스타일의 두 가지 완벽한 착장을 제안해야 합니다. 각 착장은 아우터, 상의, 하의, 신발, 가방, 벨트, 모자, 주얼리 카테고리로 나누어 구체적인 아이템을 묘사해야 합니다. 불필요한 카테고리는 '해당 없음'으로 표시하세요. 반드시 아래와 같은 JSON 형식으로만 응답해야 합니다.

    > ```json
    > {
    >   "recommendation_A": {
    >     "summary": "모던하고 시크한 무드의 올블랙 룩",
    >     "outer": "루즈핏 블랙 블레이저",
    >     "top": "실키한 소재의 화이트 이너 티셔츠",
    >     "bottom": "세미 와이드 블랙 슬랙스",
    >     "shoes": "앞코가 뾰족한 블랙 뮬",
    >     "bag": "미니멀한 디자인의 블랙 숄더백",
    >     "belt": "얇은 블랙 가죽 벨트",
    >     "hat": "해당 없음",
    >     "jewelry": "실버 드롭 이어링과 얇은 목걸이"
    >   },
    >   "recommendation_B": {
    >     "summary": "캐주얼하면서도 세련된 시티보이 룩",
    >     "outer": "해당 없음",
    >     "top": "네이비 색상의 스트라이프 보트넥 티셔츠",
    >     "bottom": "밝은 워싱의 스트레이트 데님 팬츠",
    >     "shoes": "화이트 레더 스니커즈",
    >     "bag": "캔버스 소재의 에코백",
    >     "belt": "해당 없음",
    >     "hat": "네이비 색상 볼캡",
    >     "jewelry": "실버 링"
    >   }
    > }
    > ```

    > **User Prompt**:

    >   * **사용자 정보**: 나이 28세 여성, 직업 디자이너
    >   * **상황**: 2025년 7월 16일, 서울 날씨는 맑고 최고기온 28도. 오후 반차 후 친구와 강남에서 약속이 있음.
    >   * **요청**: '와이드 슬랙스'를 활용하고 싶고, '시크하면서도 편안한 느낌'을 원함.
    >   * **추가 고려사항**: (Considering 텍스트가 있다면 여기에 추가)
    >   * **이전 추천과의 차별점**: (Another recommendation 요청 시, 이전 추천 결과 요약을 전달하여 다른 스타일을 유도)

  * **응답 (Response Body)**: Gemini API가 생성한 위 형식의 JSON을 그대로 프론트엔드로 전달합니다. 프론트엔드는 이 JSON을 파싱하여 화면에 렌더링합니다.

#### 5.2. 추천 결과에 따른 분기 처리 로직

1.  **착장 선택 + `My dressing room에 추가`**:

      * 사용자가 '착장 A'를 선택하고 버튼을 누름.
      * 프론트엔드에서 선택된 착장 A의 모든 아이템(`outer`, `top` 등)을 DB에 저장하도록 API 요청.
      * **API**: `POST /api/dressing-room/bulk`
      * **Request Body**:
        ```json
        {
          "userId": "...",
          "items": [
            { "category": "outer", "description": "루즈핏 블랙 블레이저" },
            { "category": "top", "description": "실키한 소재의 화이트 이너 티셔츠" },
            ...
          ]
        }
        ```

2.  **`마음에 드는 착장 없음` + `Another recommendation`**:

      * 프론트엔드에서 `/api/recommend`를 다시 호출.
      * 이때 Request Body의 `previousRecommendations` 필드에 방금 제안받았던 착장 A, B의 요약(summary)을 담아 보냄.
      * AI는 이 정보를 보고 이전과는 다른 새로운 스타일 2가지를 제안.

3.  **`마음에 드는 착장 없음` + Considering + `Another recommendation`**:

      * `previousRecommendations`와 함께 `considering` 필드에 사용자가 입력한 텍스트를 담아 `/api/recommend`를 호출.
      * AI는 추가 요청사항을 반영하여 새로운 스타일 2가지를 제안.

4.  **착장 선택 + Considering에 '\~\~가 없어' + `Another recommendation`**:

      * **가장 복잡한 핵심 로직.**
      * **예시**: '착장 A' 선택 + Considering에 "검은색 가죽 벨트가 없어요" 입력 + `Another recommendation` 클릭.
      * **프론트엔드 로직**:
        1.  사용자가 입력한 "검은색 가죽 벨트가 없어요" 라는 문장에서 '없는 아이템'을 식별해야 합니다. 이는 간단한 키워드('없어', '없는데', '빼고') 분석 또는 정규식을 통해 처리할 수 있습니다. (예: '검은색 가죽 벨트')
        2.  선택된 '착장 A'의 아이템 리스트를 가져옵니다.
        3.  '없는 아이템'("검은색 가죽 벨트")에 해당하는 카테고리('belt')의 아이템을 **쇼핑 리스트 추가 대상**으로 분류합니다.
        4.  나머지 아이템들('outer', 'top' 등)은 **드레싱 룸 추가 대상**으로 분류합니다.
        5.  백엔드에 2개의 API 요청을 동시에 보냅니다.
              * `POST /api/shopping-list`: 쇼핑 리스트 추가 대상 아이템 전송.
              * `POST /api/dressing-room/bulk`: 드레싱 룸 추가 대상 아이템들 전송.
        6.  처리 완료 후 사용자에게 "요청하신 아이템은 쇼핑 리스트에, 나머지는 내 옷장에 추가되었어요\!" 와 같은 피드백을 제공합니다.

-----

### 6\. 배포 가이드 (Vercel)

1.  GitHub Repository에 Next.js 프로젝트를 Push합니다.
2.  Vercel에 로그인하여 'Add New... -\> Project'를 선택합니다.
3.  생성한 GitHub Repository를 Import합니다.
4.  Vercel이 자동으로 Next.js 프로젝트임을 감지합니다. 별다른 설정 없이 'Deploy' 버튼을 누릅니다.
5.  **환경 변수 설정**:
      * Vercel 프로젝트 대시보드의 'Settings -\> Environment Variables'로 이동합니다.
      * `GEMINI_API_KEY`: Google AI Studio에서 발급받은 API 키를 등록합니다.
      * `WEATHER_API_KEY`: 날씨 API 키를 등록합니다.
      * Vercel Postgres 연동 시 생성되는 데이터베이스 관련 환경 변수들(`POSTGRES_URL` 등)은 자동으로 등록됩니다.
6.  환경 변수 등록 후 프로젝트를 Redeploy하면 모든 기능이 정상적으로 작동합니다.

-----

### 7\. 발전 방안 (로드맵)

개발 완료 후, 다음 기능들을 순차적으로 추가하여 서비스를 고도화할 수 있습니다.

1.  **여행 착장 플래너**: 사용자가 여행 기간과 목적지를 입력하면, 'My dressing room'에 있는 아이템들을 최대한 활용하여 여행 기간 동안의 일자별 착장을 여러 벌 조합하여 추천합니다.
2.  **지능형 쇼핑 리스트**: 'My dressing room'의 아이템들과 사용자가 선호하는 '분위기'를 AI가 분석하여, 현재 가지고 있는 옷들과 잘 어울릴만한 새로운 아이템을 'Shopping Recommendation' 리스트에 자동으로 추가 제안합니다.
3.  **"내 화장대" 기능 확장**: 별도의 '내 화장대' 기능을 추가하여, 사용자가 등록한 화장품들의 성분을 분석하여 궁합이 좋은 제품과 나쁜 제품을 알려주거나, 피부 타입과 그날의 날씨에 맞는 데일리 스킨케어 루틴을 제안하는 서비스를 추가합니다.