generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  age       Int?
  gender    String?
  occupation String?
  
  dressingRoomItems DressingRoomItem[]
  shoppingListItems ShoppingListItem[]
  recommendations   RecommendationHistory[]
}

model DressingRoomItem {
  id              String   @id @default(uuid())
  userId          String
  category        String
  itemDescription String   @db.Text
  groupId         String?  // 추천 그룹 ID
  groupName       String?  // 그룹 이름 (예: "캐주얼 데이트룩")
  groupDate       DateTime? // 추천받은 날짜
  groupWeather    String?  // 날씨 정보
  groupTPO        String?  // TPO 정보
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([groupId])
}

model ShoppingListItem {
  id              String   @id @default(uuid())
  userId          String
  category        String
  itemDescription String   @db.Text
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model RecommendationHistory {
  id                String   @id @default(uuid())
  userId            String
  requestInfo       Json     // 요청 정보 (날짜, 지역, TPO 등)
  weather           String?  // 날씨 정보
  recommendationA   Json     // 추천 A
  recommendationB   Json     // 추천 B
  selectedOptions   String[] // 선택한 옵션들 ['A', 'B']
  createdAt         DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}